// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	domain "yadro-go/internal/core/domain"

	gomock "github.com/golang/mock/gomock"
)

// MockStemmer is a mock of Stemmer interface.
type MockStemmer struct {
	ctrl     *gomock.Controller
	recorder *MockStemmerMockRecorder
}

// MockStemmerMockRecorder is the mock recorder for MockStemmer.
type MockStemmerMockRecorder struct {
	mock *MockStemmer
}

// NewMockStemmer creates a new mock instance.
func NewMockStemmer(ctrl *gomock.Controller) *MockStemmer {
	mock := &MockStemmer{ctrl: ctrl}
	mock.recorder = &MockStemmerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStemmer) EXPECT() *MockStemmerMockRecorder {
	return m.recorder
}

// StemComic mocks base method.
func (m *MockStemmer) StemComic(comic *domain.Comic) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StemComic", comic)
	ret0, _ := ret[0].([]string)
	return ret0
}

// StemComic indicates an expected call of StemComic.
func (mr *MockStemmerMockRecorder) StemComic(comic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StemComic", reflect.TypeOf((*MockStemmer)(nil).StemComic), comic)
}

// StemString mocks base method.
func (m *MockStemmer) StemString(str string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StemString", str)
	ret0, _ := ret[0].([]string)
	return ret0
}

// StemString indicates an expected call of StemString.
func (mr *MockStemmerMockRecorder) StemString(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StemString", reflect.TypeOf((*MockStemmer)(nil).StemString), str)
}

// MockComicProvider is a mock of ComicProvider interface.
type MockComicProvider struct {
	ctrl     *gomock.Controller
	recorder *MockComicProviderMockRecorder
}

// MockComicProviderMockRecorder is the mock recorder for MockComicProvider.
type MockComicProviderMockRecorder struct {
	mock *MockComicProvider
}

// NewMockComicProvider creates a new mock instance.
func NewMockComicProvider(ctrl *gomock.Controller) *MockComicProvider {
	mock := &MockComicProvider{ctrl: ctrl}
	mock.recorder = &MockComicProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComicProvider) EXPECT() *MockComicProviderMockRecorder {
	return m.recorder
}

// GetById mocks base method.
func (m *MockComicProvider) GetById(id int) (*domain.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", id)
	ret0, _ := ret[0].(*domain.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById.
func (mr *MockComicProviderMockRecorder) GetById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockComicProvider)(nil).GetById), id)
}

// MockComicRepository is a mock of ComicRepository interface.
type MockComicRepository struct {
	ctrl     *gomock.Controller
	recorder *MockComicRepositoryMockRecorder
}

// MockComicRepositoryMockRecorder is the mock recorder for MockComicRepository.
type MockComicRepositoryMockRecorder struct {
	mock *MockComicRepository
}

// NewMockComicRepository creates a new mock instance.
func NewMockComicRepository(ctrl *gomock.Controller) *MockComicRepository {
	mock := &MockComicRepository{ctrl: ctrl}
	mock.recorder = &MockComicRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComicRepository) EXPECT() *MockComicRepositoryMockRecorder {
	return m.recorder
}

// All mocks base method.
func (m *MockComicRepository) All(ctx context.Context) ([]*domain.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "All", ctx)
	ret0, _ := ret[0].([]*domain.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// All indicates an expected call of All.
func (mr *MockComicRepositoryMockRecorder) All(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "All", reflect.TypeOf((*MockComicRepository)(nil).All), ctx)
}

// Comics mocks base method.
func (m *MockComicRepository) Comics(ctx context.Context, nums []int) ([]*domain.Comic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comics", ctx, nums)
	ret0, _ := ret[0].([]*domain.Comic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Comics indicates an expected call of Comics.
func (mr *MockComicRepositoryMockRecorder) Comics(ctx, nums interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comics", reflect.TypeOf((*MockComicRepository)(nil).Comics), ctx, nums)
}

// Save mocks base method.
func (m *MockComicRepository) Save(ctx context.Context, comics []*domain.Comic) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, comics)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockComicRepositoryMockRecorder) Save(ctx, comics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockComicRepository)(nil).Save), ctx, comics)
}

// MockKeywordRepository is a mock of KeywordRepository interface.
type MockKeywordRepository struct {
	ctrl     *gomock.Controller
	recorder *MockKeywordRepositoryMockRecorder
}

// MockKeywordRepositoryMockRecorder is the mock recorder for MockKeywordRepository.
type MockKeywordRepositoryMockRecorder struct {
	mock *MockKeywordRepository
}

// NewMockKeywordRepository creates a new mock instance.
func NewMockKeywordRepository(ctrl *gomock.Controller) *MockKeywordRepository {
	mock := &MockKeywordRepository{ctrl: ctrl}
	mock.recorder = &MockKeywordRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKeywordRepository) EXPECT() *MockKeywordRepositoryMockRecorder {
	return m.recorder
}

// Keywords mocks base method.
func (m *MockKeywordRepository) Keywords(ctx context.Context, keywords []string) ([]*domain.ComicKeyword, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Keywords", ctx, keywords)
	ret0, _ := ret[0].([]*domain.ComicKeyword)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Keywords indicates an expected call of Keywords.
func (mr *MockKeywordRepositoryMockRecorder) Keywords(ctx, keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Keywords", reflect.TypeOf((*MockKeywordRepository)(nil).Keywords), ctx, keywords)
}

// Save mocks base method.
func (m *MockKeywordRepository) Save(ctx context.Context, keywords []*domain.ComicKeyword) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, keywords)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockKeywordRepositoryMockRecorder) Save(ctx, keywords interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockKeywordRepository)(nil).Save), ctx, keywords)
}

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// UserByUsername mocks base method.
func (m *MockUserRepository) UserByUsername(ctx context.Context, username string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserByUsername", ctx, username)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserByUsername indicates an expected call of UserByUsername.
func (mr *MockUserRepositoryMockRecorder) UserByUsername(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserByUsername", reflect.TypeOf((*MockUserRepository)(nil).UserByUsername), ctx, username)
}

// MockTokenManager is a mock of TokenManager interface.
type MockTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockTokenManagerMockRecorder
}

// MockTokenManagerMockRecorder is the mock recorder for MockTokenManager.
type MockTokenManagerMockRecorder struct {
	mock *MockTokenManager
}

// NewMockTokenManager creates a new mock instance.
func NewMockTokenManager(ctrl *gomock.Controller) *MockTokenManager {
	mock := &MockTokenManager{ctrl: ctrl}
	mock.recorder = &MockTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenManager) EXPECT() *MockTokenManagerMockRecorder {
	return m.recorder
}

// Token mocks base method.
func (m *MockTokenManager) Token(username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Token", username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Token indicates an expected call of Token.
func (mr *MockTokenManagerMockRecorder) Token(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Token", reflect.TypeOf((*MockTokenManager)(nil).Token), username)
}

// Verify mocks base method.
func (m *MockTokenManager) Verify(token string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Verify", token)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Verify indicates an expected call of Verify.
func (mr *MockTokenManagerMockRecorder) Verify(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Verify", reflect.TypeOf((*MockTokenManager)(nil).Verify), token)
}
